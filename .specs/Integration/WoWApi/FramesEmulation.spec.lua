-- Tests for my frame emulation setup.
-- This will load the wow api
dofile(".specs/AddonLoader.lua").LoadFiles {}

describe("#WoWApi #Frames", function()
	describe("basic", function()
		it("can create frames", function()
			local frame1 = CreateFrame("Frame", "Frame1")
			assert.equals("Frame1", frame1:GetName())
			assert.equals("UIParent", frame1:GetParent())
		end)

		it("can create Buttons", function()
			local btn = CreateFrame("Button", "Button1")
			assert.are.equal("Button1", btn:GetName())
			assert.False(btn:IsShown())
			assert.is.Function(btn.SetText)
		end)

		it("can create GameTooltips", function()
			local tip = CreateFrame("GameTooltip")
			assert.are.equal("UIParent", tip:GetParent())
		end)
	end)

	describe("extended", function()
		it("frames are individual objects", function()
			local frame1 = CreateFrame("Frame", "Frame1")
			local frame2 = CreateFrame("Frame", "Frame2")
			assert.equals("Frame2", frame2:GetName())
			assert.not_equals(frame1, frame2)
			assert.equals("Frame1", frame1:GetName())
			frame2.parent = "Test"
			assert.equals("Test", frame2:GetParent())
			assert.equals("UIParent", frame1:GetParent())
			frame1:Show()
			assert.not_equals(frame1:IsShown(), frame2:IsShown())
			assert.True(frame1:IsShown())
			assert.False(frame2:IsShown())

			frame1:SetScript("test", "test")
			assert.equals("test", frame1:GetScript("test"))
			assert.is_nil(frame2:GetScript("test"))

			assert.are.equal(0, frame1:GetFrameLevel())
			frame2:SetFrameLevel(1)
			assert.are.equal(0, frame1:GetFrameLevel())
			assert.are.equal(1, frame2:GetFrameLevel())
		end)

		it("frames can create textures", function()
			local frame1 = CreateFrame("Frame", "Frame1")
			local tex = frame1:CreateTexture("Tex1", "BACKGROUND")
			assert.equals("Tex1", tex:GetName())
			assert.equals("BACKGROUND", tex:GetDrawLayer())
			local tex2 = frame1:CreateTexture("Tex2", "BORDER")
			assert.not_equals(tex, tex2)
			assert.are.equal("Tex2", tex2:GetName())
			assert.are.equal("BORDER", tex2:GetDrawLayer())
		end)

		it("frames can create fontStrings", function()
			local frame1 = CreateFrame("Frame", "Frame1")
			local fs = frame1:CreateFontString("FS1", "ARTWORK")
			assert.are.equal("FS1", fs:GetName())
			assert.are.equal("ARTWORK", fs:GetDrawLayer())
			assert.are.equal("", fs:GetText())
			fs:SetText("Test")
			assert.are.equal("Test", fs:GetText())
			local fs2 = frame1:CreateFontString("FS1")
			assert.is_nil(fs2:GetDrawLayer())
			assert.are_not.equal(fs:GetText(), fs2:GetText())
			fs2:SetText("Something")
			assert.are_not.equal(fs:GetText(), fs2:GetText())
		end)

		it("GametoolTip has certain functions implemented", function()
			local tip = CreateFrame("GameTooltip", "GameTooltip1")
			assert.are.equal("GameTooltip1", tip:GetName())
			assert.is_nil(tip:GetOwner())
			tip:SetOwner("SomeFrame", "ANCHOR_TOP")
			assert.are.equal("SomeFrame", (tip:GetOwner()))
			assert.are.equal("ANCHOR_TOP", select(2, tip:GetOwner()))

			local tip2 = CreateFrame("GameTooltip")

			assert.are.equal(0, tip:NumLines())
			tip:AddLine("Test")
			assert.are.equal(1, tip:NumLines())
			tip:AddDoubleLine("te", "st")
			assert.are.equal(2, tip:NumLines())
			assert.are.equal(0, tip2:NumLines())
			tip:ClearLines()
			assert.are.equal(0, tip:NumLines())
		end)
	end)
end)
